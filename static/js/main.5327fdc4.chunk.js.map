{"version":3,"sources":["components/contactform/contactForm.module.css","components/contactlist/contactList.module.css","components/contactform/alert.module.css","components/app/app.module.css","components/filtr/filter.module.css","redux/phoneConstants.jsx","redux/phoneActions.jsx","components/contactform/ContactForm.jsx","components/filtr/Filter.jsx","components/contactlist/ContactList.jsx","redux/phoneReducer.jsx","redux/store.jsx","index.js","components/app/App.jsx"],"names":["module","exports","actionType","recordAdd","createAction","recordRemove","changeFilter","ContactForm","contacts","onRecordAdd","useState","name","setName","number","setNumber","exist","setExist","handleChange","e","target","value","lastSymbolAdd","split","pop","isNumberValid","length","Number","phoneNumLength","x","splice","join","numberValidation","clearSetState","CSSTransition","in","timeout","classNames","styleAlert","onEntered","setTimeout","unmountOnExit","Alert","variant","className","alert","onSubmit","preventDefault","newName","some","contact","toLowerCase","newContact","id","uuidv4","style","phoneBookForm","htmlFor","labelStyle","type","onChange","protoTypes","onFindOverlap","PropTypes","func","isRequired","onCheckIn","connect","state","dispatch","newRecord","phoneActions","Filter","filter","onChangeFilter","onFindContact","ev","ContactList","onRecordRemove","searchList","startsWith","ListGroup","TransitionGroup","map","key","Item","Row","Col","todo","sm","Button","size","onClick","onShowFindRes","onDelete","initialState","JSON","parse","localStorage","getItem","upDateLocalStorage","setItem","stringify","contactsReducer","createReducer","action","newState","payload","elem","filterReducer","store","configureStore","reducer","phoneReducer","ReactDOM","render","animation","setAnimation","useEffect","container","document","getElementById"],"mappings":"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","file":"static/js/main.5327fdc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookForm\":\"contactForm_phoneBookForm__2qPF-\",\"labelStyle\":\"contactForm_labelStyle__pqo77\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"contactList_todo__2ezQ9\",\"enter\":\"contactList_enter__gG3dH\",\"enterActive\":\"contactList_enterActive__3hwyX\",\"exit\":\"contactList_exit__EaIZV\",\"exitActive\":\"contactList_exitActive__1WDfB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"alert_alert__1LhbK\",\"enter\":\"alert_enter__3xwXv\",\"enterActive\":\"alert_enterActive__2WRhY\",\"exit\":\"alert_exit__27AFg\",\"exitActive\":\"alert_exitActive__2cyF3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2TQEY\",\"enter\":\"app_enter__v57tO\",\"enterActive\":\"app_enterActive__3xLly\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelStyle\":\"filter_labelStyle__1JiiU\"};","export const actionType = {\r\n  ADD: \"ADD\",\r\n  REMOVE: \"REMOVE\",\r\n  CHANGE: \"CHANGE\"\r\n};\r\n","import { actionType } from \"./phoneConstants\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const recordAdd = createAction(actionType.ADD);\r\nexport const recordRemove = createAction(actionType.REMOVE);\r\nexport const changeFilter = createAction(actionType.CHANGE);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as phoneActions from \"../../redux/phoneActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport style from \"./contactForm.module.css\";\r\nimport styleAlert from \"./alert.module.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst ContactForm = ({ contacts, onRecordAdd }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [exist, setExist] = useState(false);\r\n  const numberValidation = (value) => {\r\n    const lastSymbolAdd = value.split(\"\").pop();\r\n    const isNumberValid = value.length < 10 && Number(lastSymbolAdd);\r\n    const isDeletePush = value.length < number.length;\r\n    if (isDeletePush) {\r\n      setNumber(value);\r\n    } else {\r\n      if (isNumberValid || isNumberValid === 0) {\r\n        const phoneNumLength = value.length;\r\n        if (phoneNumLength === 4 || phoneNumLength === 7) {\r\n          let x = value.split(\"\");\r\n          x.splice(phoneNumLength - 1, 0, \"-\");\r\n          x = x.join(\"\");\r\n          value = x;\r\n        }\r\n        setNumber(value);\r\n      }\r\n    }\r\n  };\r\n  const handleChange = (e) => {\r\n    let { name, value } = e.target;\r\n    if (name === \"number\") {\r\n      numberValidation(value);\r\n    } else {\r\n      setName(value);\r\n    }\r\n  };\r\n  const clearSetState = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n  const handleFindOverlap = (newName) =>\r\n    contacts.some((contact) =>\r\n      contact.name\r\n        .toLowerCase()\r\n        .split(\" \")\r\n        .some((name) => name === newName.toLowerCase())\r\n    );\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (handleFindOverlap(name)) {\r\n      setExist(true);\r\n      clearSetState();\r\n      return;\r\n    }\r\n\r\n    const newContact = { id: uuidv4(), name, number };\r\n    name && number && onRecordAdd(newContact);\r\n    clearSetState();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CSSTransition\r\n        in={exist}\r\n        timeout={1500}\r\n        classNames={styleAlert}\r\n        onEntered={() => setTimeout(() => setExist(false), 1000)}\r\n        unmountOnExit\r\n      >\r\n        <Alert variant=\"danger\" className={styleAlert.alert}>\r\n          Contact already exists!\r\n        </Alert>\r\n      </CSSTransition>\r\n\r\n      <form onSubmit={handleSubmit} className={style.phoneBookForm}>\r\n        <label htmlFor=\"nameForm\" className={style.labelStyle}>\r\n          Name\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            name=\"name\"\r\n            id=\"nameForm\"\r\n          />\r\n        </label>\r\n        <label htmlFor=\"numberForm\" className={style.labelStyle}>\r\n          Number\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            name=\"number\"\r\n            id=\"numberForm\"\r\n          ></input>\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// export class ContactForm extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     number: \"\",\r\n//     isExist: false,\r\n//   };\r\n\r\n//   numberValidation = (value) => {\r\n//     const lastSymbolAdd = value.split(\"\").pop();\r\n//     const isNumberValid = value.length < 10 && Number(lastSymbolAdd);\r\n//     const isDeletePush = value.length < this.state.number.length;\r\n//     if (isDeletePush) {\r\n//       this.setState({ number: value });\r\n//     } else {\r\n//       if (isNumberValid || isNumberValid === 0) {\r\n//         const phoneNumLength = value.length;\r\n//         if (phoneNumLength === 4 || phoneNumLength === 7) {\r\n//           let x = value.split(\"\");\r\n//           x.splice(phoneNumLength - 1, 0, \"-\");\r\n//           x = x.join(\"\");\r\n//           value = x;\r\n//         }\r\n//         this.setState({ number: value });\r\n//       }\r\n//     }\r\n//   };\r\n//   handleChange = (e) => {\r\n//     let { name, value } = e.target;\r\n//     if (name === \"number\") {\r\n//       this.numberValidation(value);\r\n//     } else {\r\n//       this.setState({ [name]: value });\r\n//     }\r\n//   };\r\n//   clearSetState() {\r\n//     this.setState({\r\n//       name: \"\",\r\n//       number: \"\",\r\n//     });\r\n//   }\r\n//   handleFindOverlap = (newName) =>\r\n//     this.props.contacts.some((contact) =>\r\n//       contact.name\r\n//         .toLowerCase()\r\n//         .split(\" \")\r\n//         .some((name) => name === newName.toLowerCase())\r\n//     );\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     const { name, number } = this.state;\r\n//     if (this.handleFindOverlap(name)) {\r\n//       this.setState({ isExist: true });\r\n//       this.clearSetState();\r\n//       return;\r\n//     }\r\n\r\n//     const newContact = { id: uuidv4(), name, number };\r\n//     name && number && this.props.onRecordAdd(newContact);\r\n//     this.clearSetState();\r\n//   };\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     return (\r\n//       <div>\r\n//         <CSSTransition\r\n//           in={this.state.isExist}\r\n//           timeout={1500}\r\n//           classNames={styleAlert}\r\n//           onEntered={() =>\r\n//             setTimeout(() => this.setState({ isExist: false }), 1000)\r\n//           }\r\n//           unmountOnExit\r\n//         >\r\n//           <Alert variant=\"danger\" className={styleAlert.alert}>\r\n//             Contact already exists!\r\n//           </Alert>\r\n//         </CSSTransition>\r\n\r\n//         <form onSubmit={this.handleSubmit} className={style.phoneBookForm}>\r\n//           <label htmlFor=\"nameForm\" className={style.labelStyle}>\r\n//             Name\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={name}\r\n//               onChange={this.handleChange}\r\n//               name=\"name\"\r\n//               id=\"nameForm\"\r\n//             />\r\n//           </label>\r\n//           <label htmlFor=\"numberForm\" className={style.labelStyle}>\r\n//             Number\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={number}\r\n//               onChange={this.handleChange}\r\n//               name=\"number\"\r\n//               id=\"numberForm\"\r\n//             ></input>\r\n//           </label>\r\n//           <button type=\"submit\">Add contact</button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\nContactForm.protoTypes = {\r\n  onFindOverlap: PropTypes.func.isRequired,\r\n  onCheckIn: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onRecordAdd: (newRecord) => dispatch(phoneActions.recordAdd(newRecord)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as phoneActions from \"../../redux/phoneActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./filter.module.css\";\r\n\r\nconst Filter = ({ contacts, filter, onChangeFilter }) => {\r\n  return (\r\n    contacts.length > 0 && (\r\n      <div>\r\n        <h2>Contacts</h2>\r\n        <label htmlFor=\"findForm\" className={style.labelStyle}>\r\n          Find contacts by name\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={onChangeFilter}\r\n            id=\"findForm\"\r\n          />\r\n        </label>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\n// class Filter extends Component {\r\n//   render() {\r\n//     return (\r\n//       this.props.contacts.length > 0 && (\r\n//         <div>\r\n//           <h2>Contacts</h2>\r\n//           <label htmlFor=\"findForm\" className={style.labelStyle}>\r\n//             Find contacts by name\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               value={this.props.filter}\r\n//               onChange={this.props.onChangeFilter}\r\n//               id=\"findForm\"\r\n//             />\r\n//           </label>\r\n//         </div>\r\n//       )\r\n//     );\r\n//   }\r\n// }\r\nFilter.protoTypes = {\r\n  onFindContact: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n  filter: state.filter,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (ev) => dispatch(phoneActions.changeFilter(ev.target.value)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as phoneActions from \"../../redux/phoneActions\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { ListGroup, Button, Row, Col } from \"react-bootstrap\";\r\nimport style from \"./contactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst ContactList = ({ contacts, filter, onRecordRemove }) => {\r\n  const handleFindContacts = () => {\r\n    if (filter) {\r\n      return contacts.filter((contact) =>\r\n        contact.name\r\n          .toLowerCase()\r\n          .split(\" \")\r\n          .some((name) => name.startsWith(filter.toLowerCase()))\r\n      );\r\n    } else {\r\n      return contacts;\r\n    }\r\n  };\r\n  const searchList = handleFindContacts();\r\n  return (\r\n    <div>\r\n      <ListGroup>\r\n        <TransitionGroup className=\"todo-list\">\r\n          {searchList.map(({ name, number, id }) => (\r\n            <CSSTransition key={id} timeout={250} classNames={style}>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col className={style.todo}>{name}</Col>\r\n                  <Col sm=\"auto\" className={style.todo}>\r\n                    {number}\r\n                  </Col>\r\n                  <Col sm=\"2\">\r\n                    <Button\r\n                      variant=\"danger\"\r\n                      size=\"sm\"\r\n                      id={id}\r\n                      onClick={onRecordRemove}\r\n                    >\r\n                      &times;\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\n// class ContactList extends Component {\r\n//   handleFindContacts = () => {\r\n//     if (this.props.filter) {\r\n//       return this.props.contacts.filter((contact) =>\r\n//         contact.name\r\n//           .toLowerCase()\r\n//           .split(\" \")\r\n//           .some((name) => name.startsWith(this.props.filter.toLowerCase()))\r\n//       );\r\n//     } else {\r\n//       return this.props.contacts;\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const searchList = this.handleFindContacts();\r\n//     return (\r\n//       <div>\r\n//         <ListGroup>\r\n//           <TransitionGroup className=\"todo-list\">\r\n//             {searchList.map(({ name, number, id }) => (\r\n//               <CSSTransition key={id} timeout={250} classNames={style}>\r\n//                 <ListGroup.Item>\r\n//                   <Row>\r\n//                     <Col className={style.todo}>{name}</Col>\r\n//                     <Col sm=\"auto\" className={style.todo}>\r\n//                       {number}\r\n//                     </Col>\r\n//                     <Col sm=\"2\">\r\n//                       <Button\r\n//                         variant=\"danger\"\r\n//                         size=\"sm\"\r\n//                         id={id}\r\n//                         onClick={this.props.onRecordRemove}\r\n//                       >\r\n//                         &times;\r\n//                       </Button>\r\n//                     </Col>\r\n//                   </Row>\r\n//                 </ListGroup.Item>\r\n//               </CSSTransition>\r\n//             ))}\r\n//           </TransitionGroup>\r\n//         </ListGroup>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nContactList.protoTypes = {\r\n  onShowFindRes: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n  filter: state.filter,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onRecordRemove: (ev) => dispatch(phoneActions.recordRemove(ev.target.id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { actionType } from \"./phoneConstants\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nlet initialState = JSON.parse(localStorage.getItem(\"contacts\")) || [];\r\nconst upDateLocalStorage = (state) => {\r\n  localStorage.setItem(\"contacts\", `${JSON.stringify(state)}`);\r\n};\r\nexport const contactsReducer = createReducer(initialState, {\r\n  [actionType.ADD]: (state, action) => {\r\n    const newState = [...state, action.payload];\r\n    upDateLocalStorage(newState);\r\n    return newState;\r\n  },\r\n  [actionType.REMOVE]: (state, action) => {\r\n    const newState = [...state].filter((elem) => elem.id !== action.payload);\r\n    upDateLocalStorage(newState);\r\n    return newState;\r\n  },\r\n});\r\nexport const filterReducer = createReducer(\"\", {\r\n  [actionType.CHANGE]: (state, action) => action.payload,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport * as phoneReducer from \"./phoneReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: phoneReducer.contactsReducer,\r\n    filter: phoneReducer.filterReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { App } from \"./components/app/App\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ContactForm from \"../contactform/ContactForm\";\r\nimport Filter from \"../filtr/Filter\";\r\nimport ContactList from \"../contactlist/ContactList\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport style from \"./app.module.css\";\r\n\r\nexport const App = () => {\r\n  const [animation, setAnimation] = useState(false);\r\n  useEffect(() => {\r\n    setAnimation(true);\r\n  }, []);\r\n  return (\r\n    <div className={style.container}>\r\n      <CSSTransition in={animation} timeout={500} classNames={style}>\r\n        <h1>Phonebook</h1>\r\n      </CSSTransition>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\n// export class Phonebook extends Component {\r\n//   state = {\r\n//     isAnimation: false,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.setState({ isAnimation: true });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className={style.container}>\r\n//         <CSSTransition\r\n//           in={this.state.isAnimation}\r\n//           timeout={500}\r\n//           classNames={style}\r\n//         >\r\n//           <h1>Phonebook</h1>\r\n//         </CSSTransition>\r\n//         <ContactForm />\r\n//         <Filter></Filter>\r\n//         <ContactList />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Phonebook;\r\n"],"sourceRoot":""}